// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package runtime

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoreClient is the client API for Core service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreClient interface {
	// Run an Executable, the most fundamental runtime process. Akin to shell executing a command.
	//
	// * Executable should exist on system, does not pull from a remote.
	RunExecutable(ctx context.Context, in *Executable, opts ...grpc.CallOption) (*ExecutableStatus, error)
	// Spawn a new instance of Aurae, and then create a cell of containers inside the nested Aurae instance.
	//
	// * Accepts an OCI compliant container image, will always pull the image before running.
	// * Assumes Spawn() is successful and is able to bridge to the nested Aurae and the nested cell.
	RunPod(ctx context.Context, in *Pod, opts ...grpc.CallOption) (*PodStatus, error)
	// Spawn a short lived (ephemeral) nested virtual instance of Aurae which will terminate on exit.
	// Akin to fork() in Linux, each nested instance inherits properties from the parent but runs an
	// isolated virtual machine with its own kernel and auraed instance.
	//
	// * Inherits a bridged network device from the parent (TAP).
	// * Accepts an OCI compliant container image, will always pull the image before running.
	// * Manages mTLS certificates as necessary.
	Spawn(ctx context.Context, in *SpawnRequest, opts ...grpc.CallOption) (*SpawnResponse, error)
	// Run a long lived virtual instance which will persist on exit.
	// Akin to a QEMU virtual machine running with the base auraed as a hypervisor.
	//
	// * Pull from a remote registry (e.g. qcow format)
	// * Accepts a qcow compliant virtual machine image, will always pull the image before running.
	RunVirtualMachine(ctx context.Context, in *VirtualMachine, opts ...grpc.CallOption) (*VirtualMachineStatus, error)
	// Run a set of containers in a unique Cgroup with shared namespaces.
	// Akin to running a "container" in its most native way.
	//
	// * Accepts an OCI compliant container image, will always pull the image before running.
	// * Runs directly on the same kernel as the root Auraed.
	RunCell(ctx context.Context, in *Cell, opts ...grpc.CallOption) (*CellStatus, error)
}

type coreClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreClient(cc grpc.ClientConnInterface) CoreClient {
	return &coreClient{cc}
}

func (c *coreClient) RunExecutable(ctx context.Context, in *Executable, opts ...grpc.CallOption) (*ExecutableStatus, error) {
	out := new(ExecutableStatus)
	err := c.cc.Invoke(ctx, "/runtime.Core/RunExecutable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) RunPod(ctx context.Context, in *Pod, opts ...grpc.CallOption) (*PodStatus, error) {
	out := new(PodStatus)
	err := c.cc.Invoke(ctx, "/runtime.Core/RunPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) Spawn(ctx context.Context, in *SpawnRequest, opts ...grpc.CallOption) (*SpawnResponse, error) {
	out := new(SpawnResponse)
	err := c.cc.Invoke(ctx, "/runtime.Core/Spawn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) RunVirtualMachine(ctx context.Context, in *VirtualMachine, opts ...grpc.CallOption) (*VirtualMachineStatus, error) {
	out := new(VirtualMachineStatus)
	err := c.cc.Invoke(ctx, "/runtime.Core/RunVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreClient) RunCell(ctx context.Context, in *Cell, opts ...grpc.CallOption) (*CellStatus, error) {
	out := new(CellStatus)
	err := c.cc.Invoke(ctx, "/runtime.Core/RunCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreServer is the server API for Core service.
// All implementations must embed UnimplementedCoreServer
// for forward compatibility
type CoreServer interface {
	// Run an Executable, the most fundamental runtime process. Akin to shell executing a command.
	//
	// * Executable should exist on system, does not pull from a remote.
	RunExecutable(context.Context, *Executable) (*ExecutableStatus, error)
	// Spawn a new instance of Aurae, and then create a cell of containers inside the nested Aurae instance.
	//
	// * Accepts an OCI compliant container image, will always pull the image before running.
	// * Assumes Spawn() is successful and is able to bridge to the nested Aurae and the nested cell.
	RunPod(context.Context, *Pod) (*PodStatus, error)
	// Spawn a short lived (ephemeral) nested virtual instance of Aurae which will terminate on exit.
	// Akin to fork() in Linux, each nested instance inherits properties from the parent but runs an
	// isolated virtual machine with its own kernel and auraed instance.
	//
	// * Inherits a bridged network device from the parent (TAP).
	// * Accepts an OCI compliant container image, will always pull the image before running.
	// * Manages mTLS certificates as necessary.
	Spawn(context.Context, *SpawnRequest) (*SpawnResponse, error)
	// Run a long lived virtual instance which will persist on exit.
	// Akin to a QEMU virtual machine running with the base auraed as a hypervisor.
	//
	// * Pull from a remote registry (e.g. qcow format)
	// * Accepts a qcow compliant virtual machine image, will always pull the image before running.
	RunVirtualMachine(context.Context, *VirtualMachine) (*VirtualMachineStatus, error)
	// Run a set of containers in a unique Cgroup with shared namespaces.
	// Akin to running a "container" in its most native way.
	//
	// * Accepts an OCI compliant container image, will always pull the image before running.
	// * Runs directly on the same kernel as the root Auraed.
	RunCell(context.Context, *Cell) (*CellStatus, error)
	mustEmbedUnimplementedCoreServer()
}

// UnimplementedCoreServer must be embedded to have forward compatible implementations.
type UnimplementedCoreServer struct {
}

func (UnimplementedCoreServer) RunExecutable(context.Context, *Executable) (*ExecutableStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunExecutable not implemented")
}
func (UnimplementedCoreServer) RunPod(context.Context, *Pod) (*PodStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPod not implemented")
}
func (UnimplementedCoreServer) Spawn(context.Context, *SpawnRequest) (*SpawnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Spawn not implemented")
}
func (UnimplementedCoreServer) RunVirtualMachine(context.Context, *VirtualMachine) (*VirtualMachineStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunVirtualMachine not implemented")
}
func (UnimplementedCoreServer) RunCell(context.Context, *Cell) (*CellStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCell not implemented")
}
func (UnimplementedCoreServer) mustEmbedUnimplementedCoreServer() {}

// UnsafeCoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreServer will
// result in compilation errors.
type UnsafeCoreServer interface {
	mustEmbedUnimplementedCoreServer()
}

func RegisterCoreServer(s grpc.ServiceRegistrar, srv CoreServer) {
	s.RegisterService(&Core_ServiceDesc, srv)
}

func _Core_RunExecutable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Executable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).RunExecutable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime.Core/RunExecutable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).RunExecutable(ctx, req.(*Executable))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_RunPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pod)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).RunPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime.Core/RunPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).RunPod(ctx, req.(*Pod))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_Spawn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpawnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).Spawn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime.Core/Spawn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).Spawn(ctx, req.(*SpawnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_RunVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualMachine)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).RunVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime.Core/RunVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).RunVirtualMachine(ctx, req.(*VirtualMachine))
	}
	return interceptor(ctx, in, info, handler)
}

func _Core_RunCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cell)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreServer).RunCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime.Core/RunCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreServer).RunCell(ctx, req.(*Cell))
	}
	return interceptor(ctx, in, info, handler)
}

// Core_ServiceDesc is the grpc.ServiceDesc for Core service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Core_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "runtime.Core",
	HandlerType: (*CoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunExecutable",
			Handler:    _Core_RunExecutable_Handler,
		},
		{
			MethodName: "RunPod",
			Handler:    _Core_RunPod_Handler,
		},
		{
			MethodName: "Spawn",
			Handler:    _Core_Spawn_Handler,
		},
		{
			MethodName: "RunVirtualMachine",
			Handler:    _Core_RunVirtualMachine_Handler,
		},
		{
			MethodName: "RunCell",
			Handler:    _Core_RunCell_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runtime.proto",
}
