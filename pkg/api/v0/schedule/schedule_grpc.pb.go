// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package schedule

import (
	context "context"
	runtime "github.com/aurae-runtime/client-go/pkg/api/v0/runtime"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScheduleClient is the client API for Schedule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleClient interface {
	// ShowEnabled will return a response of everything enabled on a system
	ShowEnabled(ctx context.Context, in *ShowEnabledRequest, opts ...grpc.CallOption) (*ShowEnabledResponse, error)
	// ShowDisabled will return a response of everything disabled on a system
	ShowDisabled(ctx context.Context, in *ShowDisabledRequest, opts ...grpc.CallOption) (*ShowDisabledResponse, error)
}

type scheduleClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleClient(cc grpc.ClientConnInterface) ScheduleClient {
	return &scheduleClient{cc}
}

func (c *scheduleClient) ShowEnabled(ctx context.Context, in *ShowEnabledRequest, opts ...grpc.CallOption) (*ShowEnabledResponse, error) {
	out := new(ShowEnabledResponse)
	err := c.cc.Invoke(ctx, "/schedule.Schedule/ShowEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleClient) ShowDisabled(ctx context.Context, in *ShowDisabledRequest, opts ...grpc.CallOption) (*ShowDisabledResponse, error) {
	out := new(ShowDisabledResponse)
	err := c.cc.Invoke(ctx, "/schedule.Schedule/ShowDisabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleServer is the server API for Schedule service.
// All implementations must embed UnimplementedScheduleServer
// for forward compatibility
type ScheduleServer interface {
	// ShowEnabled will return a response of everything enabled on a system
	ShowEnabled(context.Context, *ShowEnabledRequest) (*ShowEnabledResponse, error)
	// ShowDisabled will return a response of everything disabled on a system
	ShowDisabled(context.Context, *ShowDisabledRequest) (*ShowDisabledResponse, error)
	mustEmbedUnimplementedScheduleServer()
}

// UnimplementedScheduleServer must be embedded to have forward compatible implementations.
type UnimplementedScheduleServer struct {
}

func (UnimplementedScheduleServer) ShowEnabled(context.Context, *ShowEnabledRequest) (*ShowEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowEnabled not implemented")
}
func (UnimplementedScheduleServer) ShowDisabled(context.Context, *ShowDisabledRequest) (*ShowDisabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowDisabled not implemented")
}
func (UnimplementedScheduleServer) mustEmbedUnimplementedScheduleServer() {}

// UnsafeScheduleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleServer will
// result in compilation errors.
type UnsafeScheduleServer interface {
	mustEmbedUnimplementedScheduleServer()
}

func RegisterScheduleServer(s grpc.ServiceRegistrar, srv ScheduleServer) {
	s.RegisterService(&Schedule_ServiceDesc, srv)
}

func _Schedule_ShowEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServer).ShowEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedule.Schedule/ShowEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServer).ShowEnabled(ctx, req.(*ShowEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schedule_ShowDisabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowDisabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServer).ShowDisabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedule.Schedule/ShowDisabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServer).ShowDisabled(ctx, req.(*ShowDisabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Schedule_ServiceDesc is the grpc.ServiceDesc for Schedule service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Schedule_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schedule.Schedule",
	HandlerType: (*ScheduleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowEnabled",
			Handler:    _Schedule_ShowEnabled_Handler,
		},
		{
			MethodName: "ShowDisabled",
			Handler:    _Schedule_ShowDisabled_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedule.proto",
}

// ScheduleExecutableClient is the client API for ScheduleExecutable service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleExecutableClient interface {
	Enable(ctx context.Context, in *runtime.Executable, opts ...grpc.CallOption) (*ExecutableEnableResponse, error)
	Disable(ctx context.Context, in *runtime.Executable, opts ...grpc.CallOption) (*ExecutableDisableResponse, error)
	Destroy(ctx context.Context, in *runtime.Executable, opts ...grpc.CallOption) (*ExecutableDestroyResponse, error)
}

type scheduleExecutableClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleExecutableClient(cc grpc.ClientConnInterface) ScheduleExecutableClient {
	return &scheduleExecutableClient{cc}
}

func (c *scheduleExecutableClient) Enable(ctx context.Context, in *runtime.Executable, opts ...grpc.CallOption) (*ExecutableEnableResponse, error) {
	out := new(ExecutableEnableResponse)
	err := c.cc.Invoke(ctx, "/schedule.ScheduleExecutable/Enable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleExecutableClient) Disable(ctx context.Context, in *runtime.Executable, opts ...grpc.CallOption) (*ExecutableDisableResponse, error) {
	out := new(ExecutableDisableResponse)
	err := c.cc.Invoke(ctx, "/schedule.ScheduleExecutable/Disable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleExecutableClient) Destroy(ctx context.Context, in *runtime.Executable, opts ...grpc.CallOption) (*ExecutableDestroyResponse, error) {
	out := new(ExecutableDestroyResponse)
	err := c.cc.Invoke(ctx, "/schedule.ScheduleExecutable/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleExecutableServer is the server API for ScheduleExecutable service.
// All implementations must embed UnimplementedScheduleExecutableServer
// for forward compatibility
type ScheduleExecutableServer interface {
	Enable(context.Context, *runtime.Executable) (*ExecutableEnableResponse, error)
	Disable(context.Context, *runtime.Executable) (*ExecutableDisableResponse, error)
	Destroy(context.Context, *runtime.Executable) (*ExecutableDestroyResponse, error)
	mustEmbedUnimplementedScheduleExecutableServer()
}

// UnimplementedScheduleExecutableServer must be embedded to have forward compatible implementations.
type UnimplementedScheduleExecutableServer struct {
}

func (UnimplementedScheduleExecutableServer) Enable(context.Context, *runtime.Executable) (*ExecutableEnableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enable not implemented")
}
func (UnimplementedScheduleExecutableServer) Disable(context.Context, *runtime.Executable) (*ExecutableDisableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disable not implemented")
}
func (UnimplementedScheduleExecutableServer) Destroy(context.Context, *runtime.Executable) (*ExecutableDestroyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedScheduleExecutableServer) mustEmbedUnimplementedScheduleExecutableServer() {}

// UnsafeScheduleExecutableServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleExecutableServer will
// result in compilation errors.
type UnsafeScheduleExecutableServer interface {
	mustEmbedUnimplementedScheduleExecutableServer()
}

func RegisterScheduleExecutableServer(s grpc.ServiceRegistrar, srv ScheduleExecutableServer) {
	s.RegisterService(&ScheduleExecutable_ServiceDesc, srv)
}

func _ScheduleExecutable_Enable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(runtime.Executable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleExecutableServer).Enable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedule.ScheduleExecutable/Enable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleExecutableServer).Enable(ctx, req.(*runtime.Executable))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleExecutable_Disable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(runtime.Executable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleExecutableServer).Disable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedule.ScheduleExecutable/Disable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleExecutableServer).Disable(ctx, req.(*runtime.Executable))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleExecutable_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(runtime.Executable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleExecutableServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedule.ScheduleExecutable/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleExecutableServer).Destroy(ctx, req.(*runtime.Executable))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduleExecutable_ServiceDesc is the grpc.ServiceDesc for ScheduleExecutable service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduleExecutable_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schedule.ScheduleExecutable",
	HandlerType: (*ScheduleExecutableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enable",
			Handler:    _ScheduleExecutable_Enable_Handler,
		},
		{
			MethodName: "Disable",
			Handler:    _ScheduleExecutable_Disable_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _ScheduleExecutable_Destroy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schedule.proto",
}
